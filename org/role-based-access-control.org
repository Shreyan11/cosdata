#+title: RBAC Implementation for Vector Database
#+author: Nithin Mani

* Overview
The document outlines the updated design specifications for implementing Role-Based Access Control (RBAC) in our vector database system.

* Logical Schema Design

** Core Entities
*** Users
- user_id (PK)
- username
- password_hash
- collection_roles (mappings to collections and roles)

*** Roles
- role_id (PK)
- role_name
- permissions

*** Collections
- collection_id (PK)
- collection_name
- other attributes

*** Permissions List
**** Collection Management
- `list_collections`
- `create_collection`
- `update_collection`
- `delete_collection`

**** Index Management
- `list_index`
- `create_index`
- `delete_index`

**** Vector Management
- `upsert_vectors`
- `delete_vectors`
- `list_vectors`
- `check_vector_existence`

**** Querying
- `query_dense_vectors`
- `query_sparse_vectors`
- `query_hybrid_vectors`

**** Version Control
- `list_versions`
- `set_current_version`
- `get_current_version`

**** RBAC & Admin
- `manage_permissions`


** Implementation Design

*** Data Structures (Rust)
#+begin_src rust
struct User {
   user_id: u32,
   username: String,
   password_hash: String,
   collection_roles: Vec<(u32, u32)>,  // (collection_id, role_id)
}

struct Role {
   role_id: u32,
   role_name: String,
   permissions: Vec<Permission>,
}

#[derive(Debug, PartialEq, Eq, Clone, Copy)]
enum Permission {
   // Collection Management
   ListCollections,
   CreateCollection,
   UpdateCollection,
   DeleteCollection,

   // Index Management
   ListIndex,
   CreateIndex,
   DeleteIndex,

   // Vector Management
   UpsertVectors,
   DeleteVectors,
   ListVectors,
   CheckVectorExistence,

   // Querying
   QueryDenseVectors,
   QuerySparseVectors,
   QueryHybridVectors,

   // Version Control
   ListVersions,
   SetCurrentVersion,
   GetCurrentVersion,

   // RBAC & Admin
   ManagePermissions,
}

struct Collection {
   collection_id: u32,
   collection_name: String,
}
#+end_src

*** Storage Strategy (LMDB)
Updated key patterns for storage:

| Data                      | Key Pattern                   | Value                           |
|---------------------------+-------------------------------+---------------------------------|
| User objects              | ~user:{user_id}~              | Serialized User struct with collection_roles |
| Role objects              | ~role:{role_id}~              | Serialized Role struct with permissions |

*** Access Control Workflow
1. Define roles with specific permissions
2. Assign users to collections with specific roles
3. When a user attempts an operation:
   a. Check user's role for the specific collection
   b. Verify if the role has the required permission
   c. Grant or deny access accordingly

** Implementation Considerations
*** Serialization
- Use serde with appropriate format (CBOR/bincode) for serializing structs
- Handle serialization errors gracefully

*** ID Generation
- Implement monotonically increasing ID generation for users, roles, and collections
- Store current ID counters in LMDB

*** Performance Optimization
- Cache frequently accessed data (roles, permissions)
- Consider denormalizing some data to reduce lookups

*** Data Consistency
- Ensure atomic updates when modifying related data
- Implement proper error handling and rollback mechanisms

*** Security Considerations
- Store password hashes using strong cryptographic algorithms (e.g., SHA-256)
- Implement proper authentication before authorization checks

** Design Rationale
- Embedded collection-role mappings in User struct
- Direct permissions list in Role struct
- Comprehensive permission enum covering all major database operations
- Flexible and granular access control mechanism
