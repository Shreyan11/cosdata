#+title: RBAC Implementation for Vector Database
#+author: Nithin Mani

* Overview
The document outlines the updated design specifications for implementing Role-Based Access Control (RBAC) in our vector database system.

* Logical Schema Design

** Core Entities
*** Users
- user_id (PK)
- username
- password_hash
- collection_roles (mappings to collections and roles)

*** Roles
- role_id (PK)
- role_name
- permissions

*** Collections
- collection_id (PK)
- collection_name
- other attributes

*** Permissions List
**** Collection Management
- `list_collections`
- `create_collection`
- `update_collection`
- `delete_collection`

**** Index Management
- `list_index`
- `create_index`
- `delete_index`

**** Vector Management
- `upsert_vectors`
- `delete_vectors`
- `list_vectors`
- `check_vector_existence`

**** Querying
- `query_dense_vectors`
- `query_sparse_vectors`
- `query_hybrid_vectors`

**** Version Control
- `list_versions`
- `set_current_version`
- `get_current_version`

**** RBAC & Admin
- `manage_permissions`


** Implementation Design

*** Data Structures (Rust)
#+begin_src rust
struct User {
   user_id: u32,
   username: String,
   password_hash: String,
   collection_roles: Vec<(u32, u32)>,  // (collection_id, role_id)
}

struct Role {
   role_id: u32,
   role_name: String,
   permissions: Vec<Permission>,
}

#[derive(Debug, PartialEq, Eq, Clone, Copy)]
enum Permission {
   // Collection Management
   ListCollections,
   CreateCollection,
   UpdateCollection,
   DeleteCollection,

   // Index Management
   ListIndex,
   CreateIndex,
   DeleteIndex,

   // Vector Management
   UpsertVectors,
   DeleteVectors,
   ListVectors,
   CheckVectorExistence,

   // Querying
   QueryDenseVectors,
   QuerySparseVectors,
   QueryHybridVectors,

   // Version Control
   ListVersions,
   SetCurrentVersion,
   GetCurrentVersion,

   // RBAC & Admin
   ManagePermissions,
}

struct Collection {
   collection_id: u32,
   collection_name: String,
}
#+end_src

*** Storage Strategy (LMDB)
Updated key patterns for storage:

| Data                      | Key Pattern                   | Value                           |
|---------------------------+-------------------------------+---------------------------------|
| User objects              | ~user:{user_id}~              | Serialized User struct with collection_roles |
| Role objects              | ~role:{role_id}~              | Serialized Role struct with permissions |

*** Access Control Workflow
1. Define roles with specific permissions
2. Assign users to collections with specific roles
3. When a user attempts an operation:
   a. Check user's role for the specific collection
   b. Verify if the role has the required permission
   c. Grant or deny access accordingly

** Implementation Considerations
*** Serialization
- Use serde with appropriate format (CBOR/bincode) for serializing structs
- Handle serialization errors gracefully

*** ID Generation
- Implement monotonically increasing ID generation for users, roles, and collections
- Store current ID counters in LMDB

*** Performance Optimization
- Cache frequently accessed data (roles, permissions)
- Consider denormalizing some data to reduce lookups

*** Data Consistency
- Ensure atomic updates when modifying related data
- Implement proper error handling and rollback mechanisms

*** Security Considerations
- Store password hashes using strong cryptographic algorithms (e.g., SHA-256)
- Implement proper authentication before authorization checks

** Design Rationale
- Embedded collection-role mappings in User struct
- Direct permissions list in Role struct
- Comprehensive permission enum covering all major database operations
- Flexible and granular access control mechanism


* API/System Overview
RBAC is globally enforced via middleware with the following design principles:
- RBAC enforcement happens transparently behind the scenes
- API consumers do not see =/rbac/= prefixes in endpoints
- Role assignment APIs are explicitly available for administrative operations

* Users API
Users represent individual accounts in the system.

** Endpoints
| Action           | Endpoint              | Method | Description                           |
|------------------+-----------------------+--------+---------------------------------------|
| Create a user    | =/users=              | POST   | Register a new user                   |
| Get user details | =/users/{username}=   | GET    | Retrieve details for specified user   |
| List all users   | =/users=              | GET    | List all users (with optional filters)|
| Delete a user    | =/users/{username}=   | DELETE | Remove specified user                 |

* Roles API
Roles define sets of permissions that can be assigned to users.

** Endpoints
| Action           | Endpoint              | Method | Description                         |
|------------------+-----------------------+--------+-------------------------------------|
| Create a role    | =/roles=              | POST   | Define a new role                   |
| Get role details | =/roles/{role_name}=  | GET    | Retrieve details for specified role |
| List all roles   | =/roles=              | GET    | List all defined roles              |
| Delete a role    | =/roles/{role_name}=  | DELETE | Remove specified role               |

** Role Payload Example
#+BEGIN_SRC json
{
  "name": "editor",
  "description": "Can read and write to collections",
  "permissions": [
    "collections:read",
    "collections:write"
  ]
}
#+END_SRC

* Resource-Centric Role Assignments
Role assignments connect users to roles for specific resources.

** Collection Access Endpoints
| Action                     | Endpoint                                                    | Method | Description                              |
|----------------------------+------------------------------------------------------------+--------+------------------------------------------|
| Assign role to user        | =/collections/{collection_id}/access/users/{username}/roles/{role}= | POST   | Grant specified role to user on collection |
| Remove role from user      | =/collections/{collection_id}/access/users/{username}/roles/{role}= | DELETE | Remove specified role from user           |
| List access for collection | =/collections/{collection_id}/access=                             | GET    | Show all access assignments for collection |
| Get user roles             | =/collections/{collection_id}/access/users/{username}/roles=      | GET    | List all roles assigned to user for this collection |

* Collections API
Collections are protected resources managed via RBAC.

** Endpoints
| Action                | Endpoint                      | Method | Description                                 |
|-----------------------+-------------------------------+--------+---------------------------------------------|
| Create a collection   | =/collections=                | POST   | Create a new collection                     |
| List collections      | =/collections=                | GET    | List collections visible to current user    |
| Get collection details| =/collections/{id}=           | GET    | Retrieve details for specified collection   |
| Delete a collection   | =/collections/{id}=           | DELETE | Remove specified collection                 |

* Implementation Notes
** RBAC Enforcement
- All routes are subject to RBAC enforcement
- No route should be publicly accessible unless explicitly allowed
- RBAC logic should be centralized in middleware or a policy service

** Permission Model
- Fine-grained permissions are modeled via =role → permission → resource=
- Permissions should be checked at the API layer before any database queries

** Security Considerations
- JWT or session-based authentication should precede RBAC checks
- All access attempts should be logged for audit purposes
- Failed access attempts should return HTTP 403 Forbidden responses
